import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer sr = new StringTokenizer(br.readLine());
        int stringTotalCount = Integer.parseInt(sr.nextToken()); //전체 문자열의 개수
        int stringCount = Integer.parseInt(sr.nextToken()); //부분문자열의 개수
        String string = br.readLine();
        sr = new StringTokenizer(br.readLine());
        int[] DNA = new int[4];
        for(int i= 0 ; i < DNA.length;i++)DNA[i] = Integer.parseInt(sr.nextToken());
        int count  = 0;
        int []imsi = new int[4];

        /*
        로직 설명 :
        1.문제에서 주어진 값을 입력 받고 변수와 배열에 그 값을 저장한다.
        2. 우선 주어진 부분 문자열의 길이만큼 처음부터 탐색하면서 임시 배열에 문자 개수를 저장한다.
        이 부분의 경우 P가 S와 동일한 경우 다음 for문을 돌지 않고 바로 나갈 수 있다. 2번에서 한 과정에서 true가 되면 count를 1 증가 시킨다.
        3. 투포인터를 사용하여 right와 left를 하나씩 증가시켜가면서 left에서 찾은 문자의 경우 해당 배열에서 -1해주고 right는 +1해준다.
        이 때 imsi 배열에 넣어놓은 문자의 개수가 원래 DNA배열보다 클 경우 부분문자열로 사용할 수 있기 때문에 count를 +1해준다.
        위 과정이 right가 total 길이까지 반복하게 한다.
         */


        for(int i =0; i <stringCount;i++) //우선 배열안에 값을 넣기 위해 처음부에 count 까지 해서 각 문자 개수를 셈
        {
            char find = string.charAt(i);
            switch (find)
            {
                case 'A':
                {
                    imsi[0]++;
                    break;
                }
                case 'C':
                {
                    imsi[1]++;
                    break;
                }
                case 'G':
                {
                    imsi[2]++;
                    break;
                }
                case 'T':
                {
                    imsi[3]++;
                    break;
                }
            }
        }
        if(imsi[0] >=DNA[0] &&imsi[1] >=DNA[1] &&imsi[2] >=DNA[2] &&imsi[3] >=DNA[3])
        {
            count++;
        }



        int left = 0;
        int right = stringCount;
        for(;right < stringTotalCount;right++)
        {
            char find = string.charAt(right);
            char delete = string.charAt(left);
            switch (find)
            {
                case 'A':
                {
                    imsi[0]++;
                    break;
                }
                case 'C':
                {
                    imsi[1]++;
                    break;
                }
                case 'G':
                {
                    imsi[2]++;
                    break;
                }
                case 'T':
                {
                    imsi[3]++;
                    break;
                }
            }
            switch (delete)
            {
                case 'A':
                {
                    imsi[0]--;
                    break;
                }
                case 'C':
                {
                    imsi[1]--;
                    break;
                }
                case 'G':
                {
                    imsi[2]--;
                    break;
                }
                case 'T':
                {
                    imsi[3]--;
                    break;
                }

            }
            if(imsi[0] >=DNA[0] &&imsi[1] >=DNA[1] &&imsi[2] >=DNA[2] &&imsi[3] >=DNA[3])
            {
                count++;
            }
            left++;
        }
        br.close();
        System.out.println(count);

    }


    }
