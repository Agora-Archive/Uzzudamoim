import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        /*
        오큰수 구하기
        배열을 사용하여 입력 값과 출력 값을 저장, 스택에 배열의 인덱스 번호를 사용해 새로 들어온 값을 비교
        1.n+1개의 배열을 생성 0번은 인덱스를 사용하는 방식을 위해 사용하지 않음
        2. 스택을 생성하여  인덱스를 저장하는 방식으로,  top 인덱스의 배열 숫자와 새로운 숫자를 비교
        3. 만약 새로운 숫자가 더 클 경우 우선 stack을 다 비울 때 까지 반복
        4. while 안에서도 if문을 이용해 값이 새로 들어온 값이 작거나 같으면 반복을 멈추고 push
        5. pop을 하면서 숫자 인덱스를 꺼낼 떄 새로운 배열에 pop한 인덱스를 이용해 해당 값을 저장
        6. 마지막에 stack에 남은 인덱스를 pop하며 -1을 저장  오큰수를 찾지 못했기 때문
         */
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer sr = new StringTokenizer(br.readLine());
        int N  = Integer.parseInt(sr.nextToken());
        int[] Array = new int[N +1];//값을 담을 배열
        int[] Result = new int[N+1]; //오큰수를 담을 배열

        /*
        Stringtokenizer를 반복적으로 사용하는 것은 좋지 못함  해당 방법이 성능이 더 좋음
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
           String[] input = br.readLine().split(" ");
            Array[i] = Integer.parseInt(input[i-1]);
         */

       sr = new StringTokenizer(br.readLine());
        for(int i = 1;  i<= N;i++)
        {
            Array[i] = Integer.parseInt(sr.nextToken());
        }

        Stack<Integer> stack = new Stack<>();
        for(int i = 1; i <= N;i++)
        {
            while (!stack.isEmpty() && Array[stack.peek()] < Array[i]) //오큰수인 경우
            {
                Result[stack.pop()] = Array[i];
            }
            stack.push(i);
        }
        // 스택에 남아 있는 인덱스는 오큰수를 찾지 못했으므로 -1로 설정
        while (!stack.isEmpty())
        {
            Result[stack.pop()] = -1;
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= N; i++) {
            sb.append(Result[i]).append(" ");
        }
        System.out.println(sb.toString().trim());


        




    }
}
